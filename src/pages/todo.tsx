import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import Tasks from "../components/Tasks";
import { ChangeEvent, useState } from "react";

import type { inferRouterOutputs } from "@trpc/server";
import { todoRouter } from "../server/trpc/router/todo";

type TodoRouterOutput = inferRouterOutputs<typeof todoRouter>;

type Status = TodoRouterOutput["all"][0]["status"];

const Todo: NextPage = () => {
  const { data: sessionData } = useSession();

  const [task, setTask] = useState("");

  function onTaskChange(event: ChangeEvent<HTMLInputElement>) {
    setTask(event.target.value);
  }

  const { data: tasks, refetch } = trpc.todo.all.useQuery();

  const addTaskMutation = trpc.todo.create.useMutation();
  const deleteTaskMutation = trpc.todo.delete.useMutation();
  const updateTaskMutation = trpc.todo.update.useMutation();

  function deleteTask(id: number) {
    deleteTaskMutation.mutate({ id });
    setTimeout(() => {
      refetch();
    }, 100);
  }

  function updateTask(id: number, title: string, status: Status) {
    updateTaskMutation.mutate({ id, title, status });
    setTimeout(() => {
      refetch();
    }, 100);
  }

  function addTask() {
    addTaskMutation.mutate({ title: task });
    setTimeout(() => {
      refetch();
    }, 100);
    setTask("");
  }

  if (!sessionData?.user) {
    return (
      <div className="flex h-screen items-center justify-center gap-6">
        <p>Log in to reach the router</p>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gray-200">
        <div className="flex h-screen flex-col items-center justify-center gap-8">
          <div className="flex items-center justify-center gap-6">
            <input
              className="w-96 rounded-md  border-2 bg-[#E8ECF4] px-3 py-3 backdrop-blur-lg"
              value={task}
              onChange={onTaskChange}
              placeholder="Enter new task"
            />
            <button
              className="rounded-md bg-[#0264F6] px-5 py-2 font-medium text-white"
              onClick={() => addTask()}
            >
              Add Todo Item
            </button>
          </div>
          <div className="w-full">
            <Tasks
              tasks={tasks ?? []}
              delete={deleteTask}
              update={updateTask}
            />
          </div>
        </div>
      </main>
    </>
  );
};

export default Todo;
